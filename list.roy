data List a = Cons a (List a) | Nil

let nil = Nil ()

let head l = match l
    case (Cons v _) = v

let empty l = match l
    case (Cons a b) = false
    case Nil = true

let length l = match l
    case (Cons _ r) = 1 + (length r)
    case Nil = 0

let map f l = match l
    case (Cons v r) = Cons (f v) (map f r)
    case Nil = nil

let filter f l = match l
    case (Cons v r) = if (f v) then
        Cons v r
      else
        r
    case Nil = nil

let tail l = match l
    case (Cons _ r) = r
    case Nil = nil

let empty l = match l
    case (Cons a b) = false
    case Nil = true

let foldl f i l = match l
    case (Cons v r) = foldl f (f i v) r
    case Nil = i

let replicate n v =
    if (n == 0) then
      nil
    else
      Cons v (replicate (n - 1) v)

let take n l = match l
    case (Cons v r) = if n == 0 then
        nil
      else
        Cons v (take (n - 1) r)
    case Nil = nil

let count from = 
    if from == 0 then
        nil
    else
        Cons from (count (from - 1))
     
let atIndex index list =
    if index == 0 then
        head list
    else
        atIndex (index - 1) (tail list)
    
